/**
 * =============================================================================
 * TEST FUNCTIONS FOR SESSION-BASED PDF SIGNING (K√ù L∆ØU PHI√äN)
 * =============================================================================
 * 
 * File n√†y ch·ª©a c√°c functions ƒë·ªÉ test API k√Ω PDF l∆∞u phi√™n - cho ph√©p k√Ω nhi·ªÅu
 * t√†i li·ªáu li√™n ti·∫øp m√† ch·ªâ c·∫ßn x√°c th·ª±c tr√™n ·ª©ng d·ª•ng MySign M·ªòT L·∫¶N DUY NH·∫§T.
 * 
 * Backend APIs:
 * - start-transaction: B·∫Øt ƒë·∫ßu phi√™n k√Ω (l·∫ßn ƒë·∫ßu c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)
 * - continue-transaction: Ti·∫øp t·ª•c k√Ω trong phi√™n (KH√îNG c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)
 * 
 * K·∫ø th·ª´a to√†n b·ªô t√≠nh nƒÉng t·ª´ sign-pdf-advanced:
 * - H·ªó tr·ª£ 4 lo·∫°i ch·ªØ k√Ω: TextOnly, ImageOnly, ImageAndText, ImageNameDateComment
 * - K√Ω nhi·ªÅu v·ªã tr√≠ kh√°c nhau tr√™n c√πng t√†i li·ªáu
 * - K√Ω tr√™n nhi·ªÅu trang kh√°c nhau
 */

// ==================== TYPE DEFINITIONS ====================

/** 
 * C√°c lo·∫°i ch·ªØ k√Ω ƒë∆∞·ª£c h·ªó tr·ª£
 * - TextOnly: Ch·ªâ text, kh√¥ng c√≥ ·∫£nh
 * - ImageOnly: Ch·ªâ ·∫£nh ch·ªØ k√Ω, kh√¥ng c√≥ text
 * - ImageAndText: ·∫¢nh + text t√πy ch·ªânh
 * - ImageNameDateComment: ·∫¢nh + t√™n ng∆∞·ªùi k√Ω + ng√†y k√Ω + l√Ω do
 */
export type SignType = 'TextOnly' | 'ImageOnly' | 'ImageAndText' | 'ImageNameDateComment';

/** 
 * T·ªça ƒë·ªô v√† th√¥ng tin cho m·ªôt ch·ªØ k√Ω tr√™n PDF
 * H·ªá t·ªça ƒë·ªô: G·ªëc (0,0) ·ªü g√≥c TR√äN TR√ÅI, X tƒÉng sang ph·∫£i, Y tƒÉng xu·ªëng d∆∞·ªõi
 */
export interface SignatureCoordinate {
    PageNumber: number;    // S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)
    Left: number;          // Kho·∫£ng c√°ch t·ª´ l·ªÅ tr√°i (pixels)
    Top: number;           // Kho·∫£ng c√°ch t·ª´ l·ªÅ tr√™n (pixels)
    Width: number;         // Chi·ªÅu r·ªông khung ch·ªØ k√Ω (pixels)
    Height: number;        // Chi·ªÅu cao khung ch·ªØ k√Ω (pixels)
    SignType: SignType;    // Lo·∫°i ch·ªØ k√Ω
    SignText?: string;     // Text t√πy ch·ªânh (cho TextOnly v√† ImageAndText)
    SignFontSize?: number; // K√≠ch th∆∞·ªõc font ch·ªØ (optional)
}

/** T√πy ch·ªçn cho vi·ªác k√Ω PDF */
export interface SignPdfOptions {
    token?: string;                  // Bearer token ƒë·ªÉ x√°c th·ª±c
    certificateId?: string;          // ID c·ªßa ch·ª©ng th∆∞ s·ªë
    signTransactionTitle?: string;   // Ti√™u ƒë·ªÅ giao d·ªãch k√Ω
    reason?: string;                 // L√Ω do k√Ω
    location?: string;               // ƒê·ªãa ƒëi·ªÉm k√Ω
}

/** T√πy ch·ªçn ri√™ng cho start-transaction */
export interface StartTransactionOptions extends SignPdfOptions {
    transactionSignatureNumber: number; // S·ªë l∆∞·ª£ng ch·ªØ k√Ω t·ªëi ƒëa trong phi√™n
}

/** T√πy ch·ªçn ri√™ng cho continue-transaction */
export interface ContinueTransactionOptions extends SignPdfOptions {
    firstTimeSAD: string;       // Token SAD t·ª´ l·∫ßn k√Ω tr∆∞·ªõc
    durationInMinute?: number;  // Th·ªùi gian gia h·∫°n phi√™n (ph√∫t) - t√πy ch·ªçn
}

/** Response t·ª´ start-transaction v√† continue-transaction */
export interface SessionSignResponse {
    blob: Blob;           // File PDF ƒë√£ k√Ω
    sad: string | null;   // Token SAD ƒë·ªÉ d√πng cho l·∫ßn k√Ω ti·∫øp theo
    expireDate: string | null; // Th·ªùi gian h·∫øt h·∫°n c·ªßa phi√™n
}

// ==================== CONSTANTS ====================

// const BASE_URL = 'http://171.244.49.4';
const BASE_URL = 'http://localhost:5000';
const START_TRANSACTION_ENDPOINT = '/api/my-sign/sign-pdf/start-transaction';
const CONTINUE_TRANSACTION_ENDPOINT = '/api/my-sign/sign-pdf/continue-transaction';

// ==================== HELPER FOR DEBUGGING ====================

/**
 * Helper: Log FormData contents for debugging
 */
function logFormData(formData: FormData, prefix: string = 'FormData'): void {
    console.log(`üì¶ [${prefix}] Contents:`);
    // @ts-ignore - FormData.entries() is available in modern browsers
    for (const [key, value] of formData.entries()) {
        if (value instanceof File) {
            console.log(`  ${key}: [File] ${value.name} (${value.size} bytes)`);
        } else {
            const strValue = String(value);
            const displayValue = strValue.length > 100 ? strValue.substring(0, 100) + '...' : strValue;
            console.log(`  ${key}: ${displayValue}`);
        }
    }
}

// ==================== CORE FUNCTIONS ====================

/**
 * ============================================================================
 * FUNCTION 1: B·∫Øt ƒë·∫ßu phi√™n k√Ω (start-transaction)
 * ============================================================================
 * 
 * K√Ω PDF l·∫ßn ƒë·∫ßu ti√™n v√† t·∫°o phi√™n k√Ω c√≥ th·ªùi h·∫°n.
 * Y√äU C·∫¶U x√°c th·ª±c b·∫±ng ·ª©ng d·ª•ng MySign tr√™n ƒëi·ªán tho·∫°i.
 * Tr·∫£ v·ªÅ SAD token ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c l·∫ßn k√Ω ti·∫øp theo.
 * 
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param signatureCoordinates - M·∫£ng t·ªça ƒë·ªô ch·ªØ k√Ω, ho·∫∑c null ƒë·ªÉ k√Ω ·∫©n
 * @param options - C√°c t√πy ch·ªçn b·ªï sung (bao g·ªìm transactionSignatureNumber)
 * @returns Promise<SessionSignResponse> - Blob c·ªßa file PDF ƒë√£ k√Ω + SAD token + expireDate
 * 
 * @example
 * // B·∫Øt ƒë·∫ßu phi√™n k√Ω v·ªõi t·ªëi ƒëa 10 l·∫ßn k√Ω
 * const result = await startTransaction(pdfFile, coordinates, {
 *   token: 'YOUR_TOKEN',
 *   transactionSignatureNumber: 10,
 *   reason: 'Ph√™ duy·ªát h·ª£p ƒë·ªìng',
 *   location: 'H√† N·ªôi'
 * });
 * 
 * console.log('SAD Token:', result.sad);
 * console.log('H·∫øt h·∫°n l√∫c:', result.expireDate);
 */
export async function startTransaction(
    pdfFile: File,
    signatureCoordinates: SignatureCoordinate[] | null,
    options: StartTransactionOptions
): Promise<SessionSignResponse> {
    console.log('üîß [startTransaction] B·∫Øt ƒë·∫ßu phi√™n k√Ω (l·∫ßn ƒë·∫ßu - c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i):', {
        fileName: pdfFile.name,
        fileSize: pdfFile.size,
        hasCoordinates: !!signatureCoordinates,
        coordinatesCount: signatureCoordinates?.length || 0,
        transactionSignatureNumber: options.transactionSignatureNumber,
        options
    });
    
    // B∆∞·ªõc 1: T·∫°o FormData
    const formData = new FormData();
    formData.append('FileUpload', pdfFile);
    
    // B∆∞·ªõc 2: Th√™m t·ªça ƒë·ªô ch·ªØ k√Ω (n·∫øu c√≥)
    if (signatureCoordinates) {
        formData.append('SignatureCoordinates', JSON.stringify(signatureCoordinates));
    }
    
    // B∆∞·ªõc 3: Th√™m tham s·ªë b·∫Øt bu·ªôc cho start-transaction
    formData.append('TransactionSignatureNumber', options.transactionSignatureNumber.toString());
    
    // B∆∞·ªõc 4: Th√™m c√°c t√πy ch·ªçn kh√°c
    if (options.certificateId) {
        formData.append('CertificateId', options.certificateId);
    }
    
    if (options.signTransactionTitle) {
        formData.append('SignTransactionTitle', options.signTransactionTitle);
    }
    
    formData.append('Reason', options.reason || 'Ph√™ duy·ªát h·ª£p ƒë·ªìng');
    formData.append('Location', options.location || 'H√† N·ªôi');
    
    const token = options.token || 'YOUR_BEARER_TOKEN';
    
    console.log('üì° [startTransaction] G·ª≠i request ƒë·∫øn:', `${BASE_URL}${START_TRANSACTION_ENDPOINT}`);
    
    try {
        // B∆∞·ªõc 5: G·ªçi API
        const response = await fetch(`${BASE_URL}${START_TRANSACTION_ENDPOINT}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        // B∆∞·ªõc 6: Ki·ªÉm tra response
        if (!response.ok) {
            // Clone response ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc nhi·ªÅu l·∫ßn n·∫øu c·∫ßn
            const responseClone = response.clone();
            
            try {
                const json = await response.json();
                const errorDetail = JSON.stringify(json, null, 2);
                console.error('‚ùå [startTransaction] Error response from server:', errorDetail);
                
                if (json.errors) {
                    console.error('üìã [startTransaction] Validation errors:', json.errors);
                }
                
                throw new Error(`HTTP ${response.status}: ${json.message || JSON.stringify(json.errors)}`);
            } catch (parseError) {
                // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, ƒë·ªçc d·∫°ng text t·ª´ clone
                try {
                    const textError = await responseClone.text();
                    console.error('‚ùå [startTransaction] Error response (text):', textError);
                    throw new Error(`HTTP ${response.status}: ${textError}`);
                } catch (textError) {
                    console.error('‚ùå [startTransaction] Cannot read response body');
                    throw new Error(`HTTP ${response.status}: Unknown error`);
                }
            }
        }
        
        // B∆∞·ªõc 7: L·∫•y SAD token v√† expireDate t·ª´ response headers
        const sad = response.headers.get('X-MySign-Transaction-SAD');
        const expireDate = response.headers.get('X-MySign-Transaction-ExpireDate');
        
        console.log('üîë [startTransaction] SAD Token nh·∫≠n ƒë∆∞·ª£c:', sad);
        console.log('‚è∞ [startTransaction] H·∫øt h·∫°n l√∫c:', expireDate);
        
        // Debug: Log t·∫•t c·∫£ response headers
        console.log('üìã [startTransaction] All response headers:');
        response.headers.forEach((value, key) => {
            console.log(`  ${key}: ${value}`);
        });
        
        // Ki·ªÉm tra SAD c√≥ h·ª£p l·ªá kh√¥ng
        if (!sad || sad.trim() === '') {
            console.warn('‚ö†Ô∏è [startTransaction] C·∫¢NH B√ÅO: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c SAD token t·ª´ response headers!');
            console.warn('‚ö†Ô∏è Ki·ªÉm tra xem backend c√≥ tr·∫£ v·ªÅ header "X-MySign-Transaction-SAD" kh√¥ng.');
        } else {
            console.log('‚úÖ [startTransaction] SAD token h·ª£p l·ªá, length:', sad.length);
        }
        
        // B∆∞·ªõc 8: Nh·∫≠n file PDF ƒë√£ k√Ω
        const blob = await response.blob();
        
        console.log('‚úÖ [startTransaction] K√Ω th√†nh c√¥ng! Blob size:', blob.size);
        console.log('üíæ [startTransaction] L∆∞u SAD ƒë·ªÉ d√πng cho c√°c l·∫ßn k√Ω ti·∫øp theo!');
        
        return {
            blob,
            sad,
            expireDate
        };
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå [startTransaction] Error:', errorMessage);
        throw error;
    }
}

/**
 * ============================================================================
 * FUNCTION 2: Ti·∫øp t·ª•c k√Ω trong phi√™n (continue-transaction)
 * ============================================================================
 * 
 * K√Ω PDF trong phi√™n ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi start-transaction.
 * KH√îNG C·∫¶N x√°c th·ª±c b·∫±ng ·ª©ng d·ª•ng MySign tr√™n ƒëi·ªán tho·∫°i.
 * S·ª≠ d·ª•ng SAD token t·ª´ l·∫ßn k√Ω tr∆∞·ªõc.
 * 
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param signatureCoordinates - M·∫£ng t·ªça ƒë·ªô ch·ªØ k√Ω, ho·∫∑c null ƒë·ªÉ k√Ω ·∫©n
 * @param options - C√°c t√πy ch·ªçn b·ªï sung (bao g·ªìm firstTimeSAD v√† durationInMinute t√πy ch·ªçn)
 * @returns Promise<SessionSignResponse> - Blob c·ªßa file PDF ƒë√£ k√Ω + SAD token m·ªõi
 * 
 * @example
 * // Ti·∫øp t·ª•c k√Ω v·ªõi SAD t·ª´ l·∫ßn tr∆∞·ªõc
 * const result = await continueTransaction(pdfFile2, coordinates, {
 *   token: 'YOUR_TOKEN',
 *   firstTimeSAD: previousSAD,
 *   reason: 'Ph√™ duy·ªát h·ª£p ƒë·ªìng',
 *   location: 'H√† N·ªôi'
 * });
 * 
 * // Ho·∫∑c gia h·∫°n phi√™n th√™m 60 ph√∫t:
 * const result = await continueTransaction(pdfFile2, coordinates, {
 *   token: 'YOUR_TOKEN',
 *   firstTimeSAD: previousSAD,
 *   durationInMinute: 60,
 *   reason: 'Ph√™ duy·ªát h·ª£p ƒë·ªìng',
 *   location: 'H√† N·ªôi'
 * });
 * 
 * console.log('K√Ω th√†nh c√¥ng m√† kh√¥ng c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i!');
 */
export async function continueTransaction(
    pdfFile: File,
    signatureCoordinates: SignatureCoordinate[] | null,
    options: ContinueTransactionOptions
): Promise<SessionSignResponse> {
    console.log('üîß [continueTransaction] Ti·∫øp t·ª•c k√Ω trong phi√™n (KH√îNG c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i):', {
        fileName: pdfFile.name,
        fileSize: pdfFile.size,
        hasCoordinates: !!signatureCoordinates,
        coordinatesCount: signatureCoordinates?.length || 0,
        usingSAD: options.firstTimeSAD ? options.firstTimeSAD.substring(0, 30) + '...' : 'NULL/UNDEFINED',
        fullSAD: options.firstTimeSAD, // Log ƒë·∫ßy ƒë·ªß ƒë·ªÉ debug
        options
    });
    
    // Ki·ªÉm tra SAD token tr∆∞·ªõc khi g·ª≠i
    if (!options.firstTimeSAD || options.firstTimeSAD.trim() === '') {
        console.error('‚ùå [continueTransaction] FirstTimeSAD b·ªã null, undefined ho·∫∑c r·ªóng!');
        throw new Error('FirstTimeSAD kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i SAD token t·ª´ l·∫ßn k√Ω tr∆∞·ªõc.');
    }
    
    console.log('‚úÖ [continueTransaction] FirstTimeSAD h·ª£p l·ªá, length:', options.firstTimeSAD.length);
    
    // B∆∞·ªõc 1: T·∫°o FormData
    const formData = new FormData();
    formData.append('FileUpload', pdfFile);
    
    // B∆∞·ªõc 2: Th√™m t·ªça ƒë·ªô ch·ªØ k√Ω (n·∫øu c√≥)
    if (signatureCoordinates) {
        formData.append('SignatureCoordinates', JSON.stringify(signatureCoordinates));
    }
    
    // B∆∞·ªõc 3: Th√™m SAD token (QUAN TR·ªåNG!)
    formData.append('FirstTimeSAD', options.firstTimeSAD);
    console.log('üì§ [continueTransaction] ƒê√£ append FirstTimeSAD v√†o FormData:', options.firstTimeSAD.substring(0, 50));
    
    // B∆∞·ªõc 3.5: Th√™m DurationInMinute n·∫øu ƒë∆∞·ª£c cung c·∫•p (ƒë·ªÉ gia h·∫°n phi√™n)
    if (options.durationInMinute !== undefined) {
        formData.append('DurationInMinute', options.durationInMinute.toString());
        console.log('‚è∞ [continueTransaction] Gia h·∫°n phi√™n th√™m:', options.durationInMinute, 'ph√∫t');
    }
    
    // B∆∞·ªõc 4: Th√™m c√°c t√πy ch·ªçn kh√°c
    if (options.certificateId) {
        formData.append('CertificateId', options.certificateId);
    }
    
    if (options.signTransactionTitle) {
        formData.append('SignTransactionTitle', options.signTransactionTitle);
    }
    
    formData.append('Reason', options.reason || 'Ph√™ duy·ªát h·ª£p ƒë·ªìng');
    formData.append('Location', options.location || 'H√† N·ªôi');
    
    // Debug: Log to√†n b·ªô FormData tr∆∞·ªõc khi g·ª≠i
    logFormData(formData, 'continueTransaction');
    
    const token = options.token || 'YOUR_BEARER_TOKEN';
    
    console.log('üì° [continueTransaction] G·ª≠i request ƒë·∫øn:', `${BASE_URL}${CONTINUE_TRANSACTION_ENDPOINT}`);
    
    try {
        // B∆∞·ªõc 5: G·ªçi API
        const response = await fetch(`${BASE_URL}${CONTINUE_TRANSACTION_ENDPOINT}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        // B∆∞·ªõc 6: Ki·ªÉm tra response
        if (!response.ok) {
            // Clone response ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc nhi·ªÅu l·∫ßn n·∫øu c·∫ßn
            const responseClone = response.clone();
            
            try {
                const json = await response.json();
                const errorDetail = JSON.stringify(json, null, 2);
                console.error('‚ùå [continueTransaction] Error response from server:', errorDetail);
                
                // N·∫øu c√≥ validation errors, log chi ti·∫øt
                if (json.errors) {
                    console.error('üìã [continueTransaction] Validation errors:', json.errors);
                }
                
                throw new Error(`HTTP ${response.status}: ${json.message || JSON.stringify(json.errors)}`);
            } catch (parseError) {
                // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, ƒë·ªçc d·∫°ng text t·ª´ clone
                try {
                    const textError = await responseClone.text();
                    console.error('‚ùå [continueTransaction] Error response (text):', textError);
                    throw new Error(`HTTP ${response.status}: ${textError}`);
                } catch (textError) {
                    console.error('‚ùå [continueTransaction] Cannot read response body');
                    throw new Error(`HTTP ${response.status}: Unknown error`);
                }
            }
        }
        
        // B∆∞·ªõc 7: L·∫•y SAD token m·ªõi v√† expireDate
        const newSad = response.headers.get('X-MySign-Transaction-SAD');
        const expireDate = response.headers.get('X-MySign-Transaction-ExpireDate');
        
        console.log('üîë [continueTransaction] SAD Token m·ªõi:', newSad);
        console.log('‚è∞ [continueTransaction] H·∫øt h·∫°n l√∫c:', expireDate);
        
        // B∆∞·ªõc 8: Nh·∫≠n file PDF ƒë√£ k√Ω
        const blob = await response.blob();
        
        console.log('‚úÖ [continueTransaction] K√Ω th√†nh c√¥ng m√† KH√îNG C·∫¶N x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i! Blob size:', blob.size);
        
        return {
            blob,
            sad: newSad,
            expireDate
        };
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå [continueTransaction] Error:', errorMessage);
        console.error('üí° Tip: SAD c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n ho·∫∑c h·∫øt l∆∞·ª£t k√Ω. C·∫ßn b·∫Øt ƒë·∫ßu phi√™n m·ªõi v·ªõi startTransaction.');
        throw error;
    }
}

/**
 * ============================================================================
 * HELPER: Download blob to file
 * ============================================================================
 */
export function downloadBlob(blob: Blob, filename: string): void {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    console.log(`üì• Downloaded: ${filename}`);
}

// ==================== TEST CASES ====================

/**
 * TEST 1: K√Ω l∆∞u phi√™n c∆° b·∫£n v·ªõi 3 t√†i li·ªáu
 * - K√Ω t√†i li·ªáu 1 v·ªõi start-transaction (c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)
 * - K√Ω t√†i li·ªáu 2 v·ªõi continue-transaction (KH√îNG c·∫ßn x√°c th·ª±c)
 * - K√Ω t√†i li·ªáu 3 v·ªõi continue-transaction (KH√îNG c·∫ßn x√°c th·ª±c)
 */
export async function testBasicSession(pdfFiles: File[], token: string): Promise<void> {
    console.log('\nüß™ TEST 1: K√Ω l∆∞u phi√™n c∆° b·∫£n v·ªõi 3 t√†i li·ªáu');
    console.log('========================================');
    
    if (pdfFiles.length < 3) {
        throw new Error('C·∫ßn √≠t nh·∫•t 3 file PDF ƒë·ªÉ test!');
    }
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 350,
            Top: 200,
            Width: 200,
            Height: 100,
            SignType: 'ImageNameDateComment',
            SignFontSize: 12
        }
    ];
    
    // B∆Ø·ªöC 1: Start transaction v·ªõi file ƒë·∫ßu ti√™n
    console.log('\nüìù B∆Ø·ªöC 1/3: K√Ω t√†i li·ªáu ƒë·∫ßu ti√™n (C·∫¶N x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)...');
    const result1 = await startTransaction(pdfFiles[0], coordinates, {
        token,
        transactionSignatureNumber: 5,
        reason: 'Test session signing - Doc 1',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Session #1'
    });
    
    downloadBlob(result1.blob, 'session_signed_doc1.pdf');
    
    if (!result1.sad) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c SAD token t·ª´ start-transaction!');
    }
    
    // B∆Ø·ªöC 2: Continue transaction v·ªõi file th·ª© 2
    console.log('\nüìù B∆Ø·ªöC 2/3: K√Ω t√†i li·ªáu th·ª© 2 (KH√îNG c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)...');
    const result2 = await continueTransaction(pdfFiles[1], coordinates, {
        token,
        firstTimeSAD: result1.sad,
        reason: 'Test session signing - Doc 2',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Session #2'
    });
    
    downloadBlob(result2.blob, 'session_signed_doc2.pdf');
    
    if (!result2.sad) {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c SAD token m·ªõi t·ª´ continue-transaction!');
    }
    
    // B∆Ø·ªöC 3: Continue transaction v·ªõi file th·ª© 3
    console.log('\nüìù B∆Ø·ªöC 3/3: K√Ω t√†i li·ªáu th·ª© 3 (KH√îNG c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i)...');
    const result3 = await continueTransaction(pdfFiles[2], coordinates, {
        token,
        firstTimeSAD: result2.sad,
        reason: 'Test session signing - Doc 3',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Session #3'
    });
    
    downloadBlob(result3.blob, 'session_signed_doc3.pdf');
    
    console.log('\n‚úÖ Test ho√†n th√†nh! ƒê√£ k√Ω 3 t√†i li·ªáu v·ªõi ch·ªâ 1 l·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i!');
    console.log('========================================\n');
}

/**
 * TEST 2: K√Ω nhi·ªÅu t√†i li·ªáu v·ªõi c√°c lo·∫°i ch·ªØ k√Ω kh√°c nhau
 */
export async function testSessionWithDifferentSignTypes(pdfFiles: File[], token: string): Promise<void> {
    console.log('\nüß™ TEST 2: K√Ω nhi·ªÅu t√†i li·ªáu v·ªõi c√°c lo·∫°i ch·ªØ k√Ω kh√°c nhau');
    console.log('========================================');
    
    if (pdfFiles.length < 4) {
        throw new Error('C·∫ßn √≠t nh·∫•t 4 file PDF ƒë·ªÉ test!');
    }
    
    // File 1: TextOnly
    console.log('\nüìù File 1: TextOnly signature...');
    const coords1: SignatureCoordinate[] = [{
        PageNumber: 1,
        Left: 50, Top: 50,
        Width: 250, Height: 60,
        SignType: 'TextOnly',
        SignText: 'ƒê√£ k√Ω b·ªüi: Nguy·ªÖn VƒÉn A',
        SignFontSize: 14
    }];
    
    const result1 = await startTransaction(pdfFiles[0], coords1, {
        token,
        transactionSignatureNumber: 10,
        reason: 'Test TextOnly',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result1.blob, 'session_textonly.pdf');
    
    // File 2: ImageOnly
    console.log('\nüìù File 2: ImageOnly signature...');
    const coords2: SignatureCoordinate[] = [{
        PageNumber: 1,
        Left: 300, Top: 50,
        Width: 150, Height: 100,
        SignType: 'ImageOnly'
    }];
    
    const result2 = await continueTransaction(pdfFiles[1], coords2, {
        token,
        firstTimeSAD: result1.sad!,
        reason: 'Test ImageOnly',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result2.blob, 'session_imageonly.pdf');
    
    // File 3: ImageAndText
    console.log('\nüìù File 3: ImageAndText signature...');
    const coords3: SignatureCoordinate[] = [{
        PageNumber: 1,
        Left: 50, Top: 200,
        Width: 250, Height: 120,
        SignType: 'ImageAndText',
        SignText: 'Gi√°m ƒë·ªëc c√¥ng ty - ƒê√£ ki·ªÉm tra v√† ph√™ duy·ªát',
        SignFontSize: 14
    }];
    
    const result3 = await continueTransaction(pdfFiles[2], coords3, {
        token,
        firstTimeSAD: result2.sad!,
        reason: 'Test ImageAndText',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result3.blob, 'session_imageandtext.pdf');
    
    // File 4: ImageNameDateComment
    console.log('\nüìù File 4: ImageNameDateComment signature...');
    const coords4: SignatureCoordinate[] = [{
        PageNumber: 1,
        Left: 350, Top: 200,
        Width: 200, Height: 100,
        SignType: 'ImageNameDateComment',
        SignFontSize: 12
    }];
    
    const result4 = await continueTransaction(pdfFiles[3], coords4, {
        token,
        firstTimeSAD: result3.sad!,
        reason: 'Test ImageNameDateComment',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result4.blob, 'session_fullinfo.pdf');
    
    console.log('\n‚úÖ Test ho√†n th√†nh! ƒê√£ k√Ω 4 t√†i li·ªáu v·ªõi 4 lo·∫°i ch·ªØ k√Ω kh√°c nhau!');
    console.log('========================================\n');
}

/**
 * TEST 3: K√Ω nhi·ªÅu ch·ªØ k√Ω tr√™n c√πng t√†i li·ªáu trong phi√™n
 */
export async function testSessionWithMultipleSignatures(pdfFiles: File[], token: string): Promise<void> {
    console.log('\nüß™ TEST 3: K√Ω nhi·ªÅu ch·ªØ k√Ω tr√™n c√πng t√†i li·ªáu trong phi√™n');
    console.log('========================================');
    
    if (pdfFiles.length < 2) {
        throw new Error('C·∫ßn √≠t nh·∫•t 2 file PDF ƒë·ªÉ test!');
    }
    
    // File 1: 2 ch·ªØ k√Ω
    console.log('\nüìù File 1: 2 ch·ªØ k√Ω...');
    const coords1: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50, Top: 50,
            Width: 180, Height: 60,
            SignType: 'TextOnly',
            SignText: 'Ng∆∞·ªùi duy·ªát: Nguy·ªÖn VƒÉn A'
        },
        {
            PageNumber: 1,
            Left: 400, Top: 50,
            Width: 150, Height: 80,
            SignType: 'ImageOnly'
        }
    ];
    
    const result1 = await startTransaction(pdfFiles[0], coords1, {
        token,
        transactionSignatureNumber: 5,
        reason: 'Test multiple signatures in session',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result1.blob, 'session_multiple1.pdf');
    
    // File 2: 4 ch·ªØ k√Ω
    console.log('\nüìù File 2: 4 ch·ªØ k√Ω...');
    const coords2: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50, Top: 50,
            Width: 180, Height: 60,
            SignType: 'TextOnly',
            SignText: 'Ng∆∞·ªùi duy·ªát 1'
        },
        {
            PageNumber: 1,
            Left: 300, Top: 50,
            Width: 120, Height: 80,
            SignType: 'ImageOnly'
        },
        {
            PageNumber: 1,
            Left: 50, Top: 300,
            Width: 220, Height: 100,
            SignType: 'ImageAndText',
            SignText: 'ƒê√£ ki·ªÉm tra v√† ph√™ duy·ªát'
        },
        {
            PageNumber: 1,
            Left: 350, Top: 300,
            Width: 180, Height: 90,
            SignType: 'ImageNameDateComment'
        }
    ];
    
    const result2 = await continueTransaction(pdfFiles[1], coords2, {
        token,
        firstTimeSAD: result1.sad!,
        reason: 'Test multiple signatures in session',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result2.blob, 'session_multiple2.pdf');
    
    console.log('\n‚úÖ Test ho√†n th√†nh! ƒê√£ k√Ω 2 t√†i li·ªáu v·ªõi nhi·ªÅu ch·ªØ k√Ω tr√™n m·ªói t√†i li·ªáu!');
    console.log('========================================\n');
}

/**
 * TEST 4: K√Ω ·∫©n trong phi√™n
 */
export async function testSessionWithHiddenSignatures(pdfFiles: File[], token: string): Promise<void> {
    console.log('\nüß™ TEST 4: K√Ω ·∫©n trong phi√™n');
    console.log('========================================');
    
    if (pdfFiles.length < 2) {
        throw new Error('C·∫ßn √≠t nh·∫•t 2 file PDF ƒë·ªÉ test!');
    }
    
    // File 1: K√Ω ·∫©n
    console.log('\nüìù File 1: Hidden signature...');
    const result1 = await startTransaction(pdfFiles[0], null, {
        token,
        transactionSignatureNumber: 5,
        reason: 'Test hidden signature in session',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result1.blob, 'session_hidden1.pdf');
    
    // File 2: K√Ω ·∫©n
    console.log('\nüìù File 2: Hidden signature...');
    const result2 = await continueTransaction(pdfFiles[1], null, {
        token,
        firstTimeSAD: result1.sad!,
        reason: 'Test hidden signature in session',
        location: 'H√† N·ªôi'
    });
    downloadBlob(result2.blob, 'session_hidden2.pdf');
    
    console.log('\n‚úÖ Test ho√†n th√†nh! ƒê√£ k√Ω ·∫©n 2 t√†i li·ªáu trong phi√™n!');
    console.log('========================================\n');
}

/**
 * TEST 5: Stress test - K√Ω nhi·ªÅu t√†i li·ªáu li√™n ti·∫øp (5-10 files)
 */
export async function testSessionStressTest(pdfFiles: File[], token: string, maxFiles: number = 5): Promise<void> {
    console.log(`\nüß™ TEST 5: Stress test - K√Ω ${maxFiles} t√†i li·ªáu li√™n ti·∫øp`);
    console.log('========================================');
    
    if (pdfFiles.length < maxFiles) {
        throw new Error(`C·∫ßn √≠t nh·∫•t ${maxFiles} file PDF ƒë·ªÉ test!`);
    }
    
    const coordinates: SignatureCoordinate[] = [{
        PageNumber: 1,
        Left: 350,
        Top: 200,
        Width: 200,
        Height: 100,
        SignType: 'ImageNameDateComment'
    }];
    
    const startTime = Date.now();
    
    // File ƒë·∫ßu ti√™n
    console.log(`\nüìù [1/${maxFiles}] K√Ω file ƒë·∫ßu ti√™n (C·∫¶N x√°c th·ª±c)...`);
    let result = await startTransaction(pdfFiles[0], coordinates, {
        token,
        transactionSignatureNumber: maxFiles,
        reason: `Stress test - Document 1/${maxFiles}`,
        location: 'H√† N·ªôi'
    });
    downloadBlob(result.blob, `stress_test_doc1.pdf`);
    
    // C√°c file ti·∫øp theo
    for (let i = 1; i < maxFiles; i++) {
        console.log(`\nüìù [${i + 1}/${maxFiles}] K√Ω file th·ª© ${i + 1} (KH√îNG c·∫ßn x√°c th·ª±c)...`);
        result = await continueTransaction(pdfFiles[i], coordinates, {
            token,
            firstTimeSAD: result.sad!,
            reason: `Stress test - Document ${i + 1}/${maxFiles}`,
            location: 'H√† N·ªôi'
        });
        downloadBlob(result.blob, `stress_test_doc${i + 1}.pdf`);
    }
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    const avgTime = (parseFloat(duration) / maxFiles).toFixed(2);
    
    console.log('\n‚úÖ Stress test ho√†n th√†nh!');
    console.log(`‚è±Ô∏è T·ªïng th·ªùi gian: ${duration}s`);
    console.log(`‚è±Ô∏è Th·ªùi gian trung b√¨nh m·ªói file: ${avgTime}s`);
    console.log(`üìù ƒê√£ k√Ω ${maxFiles} t√†i li·ªáu v·ªõi ch·ªâ 1 l·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i!`);
    console.log('========================================\n');
}

// ==================== HELPER FUNCTIONS ====================

/**
 * Helper: L·∫•y nhi·ªÅu file PDF t·ª´ input element
 */
export function getPdfFilesFromInput(fileInputId: string = 'pdfFile'): File[] {
    const fileInput = document.getElementById(fileInputId) as HTMLInputElement | null;
    
    if (!fileInput) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y input element v·ªõi id="${fileInputId}"`);
    }
    
    if (!fileInput.files || fileInput.files.length === 0) {
        throw new Error('Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 file PDF tr∆∞·ªõc!');
    }
    
    return Array.from(fileInput.files);
}

/**
 * Helper: L·∫•y 1 file PDF t·ª´ input element
 */
export function getSinglePdfFileFromInput(fileInputId: string = 'pdfFile'): File {
    const files = getPdfFilesFromInput(fileInputId);
    return files[0];
}

// ==================== RUN ALL TESTS ====================

/**
 * Ch·∫°y t·∫•t c·∫£ 5 test cases cho k√Ω l∆∞u phi√™n
 * 
 * Y√™u c·∫ßu:
 * - C√≥ input element v·ªõi id='pdfFile' trong DOM
 * - File PDF ƒë√£ ƒë∆∞·ª£c ch·ªçn (khuy·∫øn ngh·ªã: ch·ªçn nhi·ªÅu file, √≠t nh·∫•t 5 files)
 * 
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @param fileInputId - ID c·ªßa input element (default: 'pdfFile')
 * 
 * @example
 * // Trong browser console:
 * await runAllSessionTests('YOUR_TOKEN');
 */
export async function runAllSessionTests(token: string, fileInputId: string = 'pdfFileSession'): Promise<void> {
    console.log('\n========================================');
    console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y T·∫§T C·∫¢ 5 test cases cho K√ù L∆ØU PHI√äN');
    console.log('========================================\n');
    
    try {
        const pdfFiles = getPdfFilesFromInput(fileInputId);
        
        console.log('üìÑ S·ªë l∆∞·ª£ng files:', pdfFiles.length);
        console.log('üìä T·ªïng k√≠ch th∆∞·ªõc:', (pdfFiles.reduce((sum, f) => sum + f.size, 0) / 1024).toFixed(2), 'KB');
        console.log('üîë Token:', token.substring(0, 20) + '...\n');
        
        if (pdfFiles.length < 5) {
            console.warn('‚ö†Ô∏è C·∫£nh b√°o: N√™n ch·ªçn √≠t nh·∫•t 5 files ƒë·ªÉ test ƒë·∫ßy ƒë·ªß. M·ªôt s·ªë test c√≥ th·ªÉ b·ªã b·ªè qua.');
        }
        
        const startTime = Date.now();
        
        // Test 1: Basic session
        if (pdfFiles.length >= 3) {
            console.log('‚è±Ô∏è Ch·∫°y Test 1/5: Basic Session...');
            await testBasicSession(pdfFiles, token);
        } else {
            console.log('‚è≠Ô∏è B·ªè qua Test 1: Kh√¥ng ƒë·ªß file (c·∫ßn 3)');
        }
        
        // Test 2: Different sign types
        if (pdfFiles.length >= 4) {
            console.log('‚è±Ô∏è Ch·∫°y Test 2/5: Different Sign Types...');
            await testSessionWithDifferentSignTypes(pdfFiles, token);
        } else {
            console.log('‚è≠Ô∏è B·ªè qua Test 2: Kh√¥ng ƒë·ªß file (c·∫ßn 4)');
        }
        
        // Test 3: Multiple signatures
        if (pdfFiles.length >= 2) {
            console.log('‚è±Ô∏è Ch·∫°y Test 3/5: Multiple Signatures...');
            await testSessionWithMultipleSignatures(pdfFiles, token);
        } else {
            console.log('‚è≠Ô∏è B·ªè qua Test 3: Kh√¥ng ƒë·ªß file (c·∫ßn 2)');
        }
        
        // Test 4: Hidden signatures
        if (pdfFiles.length >= 2) {
            console.log('‚è±Ô∏è Ch·∫°y Test 4/5: Hidden Signatures...');
            await testSessionWithHiddenSignatures(pdfFiles, token);
        } else {
            console.log('‚è≠Ô∏è B·ªè qua Test 4: Kh√¥ng ƒë·ªß file (c·∫ßn 2)');
        }
        
        // Test 5: Stress test
        if (pdfFiles.length >= 5) {
            console.log('‚è±Ô∏è Ch·∫°y Test 5/5: Stress Test...');
            await testSessionStressTest(pdfFiles, token, Math.min(pdfFiles.length, 10));
        } else {
            console.log('‚è≠Ô∏è B·ªè qua Test 5: Kh√¥ng ƒë·ªß file (c·∫ßn 5)');
        }
        
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        
        console.log('\n========================================');
        console.log('‚úÖ T·∫§T C·∫¢ TESTS HO√ÄN TH√ÄNH!');
        console.log(`‚è±Ô∏è T·ªïng th·ªùi gian: ${duration}s`);
        console.log('üéâ K√Ω l∆∞u phi√™n ho·∫°t ƒë·ªông ho√†n h·∫£o!');
        console.log('========================================\n');
        
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('\n========================================');
        console.error('‚ùå TEST FAILED:', errorMessage);
        console.error('========================================\n');
        throw error;
    }
}

/**
 * Quick test - Ch·ªâ test c∆° b·∫£n v·ªõi 3 files
 */
export async function quickSessionTest(token: string, fileInputId: string = 'pdfFileSession'): Promise<void> {
    console.log('\n========================================');
    console.log('üöÄ QUICK TEST: K√Ω l∆∞u phi√™n c∆° b·∫£n (3 files)');
    console.log('========================================\n');
    
    const pdfFiles = getPdfFilesFromInput(fileInputId);
    
    if (pdfFiles.length < 3) {
        throw new Error('Quick test c·∫ßn √≠t nh·∫•t 3 file PDF!');
    }
    
    await testBasicSession(pdfFiles, token);
}

// ==================== MODULE INFO ====================

console.log('\n========================================');
console.log('‚úÖ SESSION-BASED PDF SIGNING TEST FUNCTIONS LOADED!');
console.log('========================================');
console.log('\nüì¶ Exported Core Functions:');
console.log('  1. startTransaction(pdfFile, coordinates, options) - B·∫Øt ƒë·∫ßu phi√™n k√Ω');
console.log('  2. continueTransaction(pdfFile, coordinates, options) - Ti·∫øp t·ª•c k√Ω trong phi√™n');
console.log('  3. downloadBlob(blob, filename) - Download file ƒë√£ k√Ω');
console.log('\nüì¶ Exported Test Functions:');
console.log('  1. testBasicSession(pdfFiles, token) - Test c∆° b·∫£n v·ªõi 3 files');
console.log('  2. testSessionWithDifferentSignTypes(pdfFiles, token) - Test 4 lo·∫°i ch·ªØ k√Ω');
console.log('  3. testSessionWithMultipleSignatures(pdfFiles, token) - Test nhi·ªÅu ch·ªØ k√Ω');
console.log('  4. testSessionWithHiddenSignatures(pdfFiles, token) - Test k√Ω ·∫©n');
console.log('  5. testSessionStressTest(pdfFiles, token, maxFiles) - Stress test');
console.log('\nüì¶ Exported Helper Functions:');
console.log('  1. getPdfFilesFromInput(fileInputId) - L·∫•y nhi·ªÅu files t·ª´ input');
console.log('  2. getSinglePdfFileFromInput(fileInputId) - L·∫•y 1 file t·ª´ input');
console.log('  3. runAllSessionTests(token, fileInputId) - Ch·∫°y t·∫•t c·∫£ 5 tests');
console.log('  4. quickSessionTest(token, fileInputId) - Quick test v·ªõi 3 files');
console.log('\nüöÄ Quick Start:');
console.log('  const token = "YOUR_TOKEN";');
console.log('  ');
console.log('  // Ch·∫°y quick test (c·∫ßn 3 files):');
console.log('  await quickSessionTest(token);');
console.log('  ');
console.log('  // Ho·∫∑c ch·∫°y t·∫•t c·∫£ tests (khuy·∫øn ngh·ªã 5-10 files):');
console.log('  await runAllSessionTests(token);');
console.log('  ');
console.log('  // Ho·∫∑c ch·∫°y t·ª´ng test ri√™ng l·∫ª:');
console.log('  const files = getPdfFilesFromInput("pdfFile");');
console.log('  await testBasicSession(files, token);');
console.log('\nüí° Tips:');
console.log('  - Ch·ªçn nhi·ªÅu file PDF trong input (multiple files)');
console.log('  - Khuy·∫øn ngh·ªã ch·ªçn 5-10 files ƒë·ªÉ test ƒë·∫ßy ƒë·ªß');
console.log('  - Ch·ªâ c·∫ßn x√°c th·ª±c tr√™n ƒëi·ªán tho·∫°i 1 L·∫¶N DUY NH·∫§T cho file ƒë·∫ßu ti√™n');
console.log('  - C√°c file ti·∫øp theo s·∫Ω k√Ω t·ª± ƒë·ªông m√† kh√¥ng c·∫ßn x√°c th·ª±c!');
console.log('========================================\n');

