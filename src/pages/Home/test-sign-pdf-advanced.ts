/**
 * =============================================================================
 * TEST FUNCTIONS FOR SIGN-PDF-ADVANCED API ENDPOINT
 * =============================================================================
 * 
 * File n√†y ch·ª©a c√°c functions ƒë·ªÉ test API k√Ω PDF n√¢ng cao v·ªõi nhi·ªÅu lo·∫°i ch·ªØ k√Ω.
 * Backend: TaskstreamForge_MySignBackend\Controllers\MySignController.SignPdfAdvanced.cs
 * 
 * API h·ªó tr·ª£ 4 lo·∫°i ch·ªØ k√Ω:
 * 1. TextOnly: Ch·ªâ hi·ªÉn th·ªã text
 * 2. ImageOnly: Ch·ªâ hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω
 * 3. ImageAndText: K·∫øt h·ª£p ·∫£nh + text t√πy ch·ªânh
 * 4. ImageNameDateComment: Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß (·∫£nh + t√™n + ng√†y + comment)
 * 
 * C√≥ th·ªÉ k√Ω ·∫©n b·∫±ng c√°ch truy·ªÅn null cho signatureCoordinates
 */

// ==================== TYPE DEFINITIONS ====================

/** 
 * C√°c lo·∫°i ch·ªØ k√Ω ƒë∆∞·ª£c h·ªó tr·ª£
 * - TextOnly: Ch·ªâ text, kh√¥ng c√≥ ·∫£nh
 * - ImageOnly: Ch·ªâ ·∫£nh ch·ªØ k√Ω, kh√¥ng c√≥ text
 * - ImageAndText: ·∫¢nh + text t√πy ch·ªânh
 * - ImageNameDateComment: ·∫¢nh + t√™n ng∆∞·ªùi k√Ω + ng√†y k√Ω + l√Ω do
 */
export type SignType = 'TextOnly' | 'ImageOnly' | 'ImageAndText' | 'ImageNameDateComment';

/** 
 * T·ªça ƒë·ªô v√† th√¥ng tin cho m·ªôt ch·ªØ k√Ω tr√™n PDF
 * H·ªá t·ªça ƒë·ªô: G·ªëc (0,0) ·ªü g√≥c TR√äN TR√ÅI, X tƒÉng sang ph·∫£i, Y tƒÉng xu·ªëng d∆∞·ªõi
 */
export interface SignatureCoordinate {
    PageNumber: number;    // S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)
    Left: number;          // Kho·∫£ng c√°ch t·ª´ l·ªÅ tr√°i (pixels)
    Top: number;           // Kho·∫£ng c√°ch t·ª´ l·ªÅ tr√™n (pixels)
    Width: number;         // Chi·ªÅu r·ªông khung ch·ªØ k√Ω (pixels)
    Height: number;        // Chi·ªÅu cao khung ch·ªØ k√Ω (pixels)
    SignType: SignType;    // Lo·∫°i ch·ªØ k√Ω
    SignText?: string;     // Text t√πy ch·ªânh (cho TextOnly v√† ImageAndText)
    SignFontSize?: number; // K√≠ch th∆∞·ªõc font ch·ªØ (optional)
}

/** T√πy ch·ªçn cho vi·ªác k√Ω PDF */
export interface SignPdfOptions {
    token?: string;                  // Bearer token ƒë·ªÉ x√°c th·ª±c
    certificateId?: string;          // ID c·ªßa ch·ª©ng th∆∞ s·ªë
    signTransactionTitle?: string;   // Ti√™u ƒë·ªÅ giao d·ªãch k√Ω
    reason?: string;                 // L√Ω do k√Ω
    location?: string;               // ƒê·ªãa ƒëi·ªÉm k√Ω
}

// ==================== CONSTANTS ====================

const BASE_URL = 'http://171.244.49.4';
const API_ENDPOINT = '/api/my-sign/sign-pdf-advanced';

// ==================== FUNCTIONS ====================

/**
 * ============================================================================
 * MAIN FUNCTION: K√Ω PDF v·ªõi t·ªça ƒë·ªô n√¢ng cao
 * ============================================================================
 * 
 * Function ch√≠nh ƒë·ªÉ g·ªçi API sign-pdf-advanced
 * 
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param signatureCoordinates - M·∫£ng t·ªça ƒë·ªô ch·ªØ k√Ω, ho·∫∑c null ƒë·ªÉ k√Ω ·∫©n
 * @param options - C√°c t√πy ch·ªçn b·ªï sung (token, certificateId, reason,...)
 * @returns Promise<Blob> - Blob c·ªßa file PDF ƒë√£ k√Ω
 * 
 * @example
 * // K√Ω ·∫©n (kh√¥ng hi·ªÉn th·ªã ch·ªØ k√Ω tr√™n PDF)
 * await signPdfAdvanced(pdfFile, null, { token: 'YOUR_TOKEN' });
 * 
 * @example
 * // K√Ω v·ªõi 1 ch·ªØ k√Ω TextOnly
 * const coords = [{
 *   PageNumber: 1,
 *   Left: 50, Top: 50,
 *   Width: 200, Height: 80,
 *   SignType: 'TextOnly',
 *   SignText: 'ƒê√£ k√Ω b·ªüi: Nguy·ªÖn VƒÉn A'
 * }];
 * await signPdfAdvanced(pdfFile, coords, { token: 'YOUR_TOKEN' });
 */
export async function signPdfAdvanced(
    pdfFile: File,
    signatureCoordinates: SignatureCoordinate[] | null,
    options: SignPdfOptions = {}
): Promise<Blob> {
    console.log('üîß [signPdfAdvanced] B·∫Øt ƒë·∫ßu k√Ω PDF:', {
        fileName: pdfFile.name,
        fileSize: pdfFile.size,
        hasCoordinates: !!signatureCoordinates,
        coordinatesCount: signatureCoordinates?.length || 0,
        options
    });
    
    // B∆∞·ªõc 1: T·∫°o FormData ƒë·ªÉ g·ª≠i l√™n server
    const formData = new FormData();
    formData.append('FileUpload', pdfFile);
    
    // B∆∞·ªõc 2: Th√™m t·ªça ƒë·ªô ch·ªØ k√Ω (n·∫øu c√≥)
    if (signatureCoordinates) {
        formData.append('SignatureCoordinates', JSON.stringify(signatureCoordinates));
    }
    
    // B∆∞·ªõc 3: Th√™m c√°c t√πy ch·ªçn b·ªï sung
    if (options.certificateId) {
        formData.append('CertificateId', options.certificateId);
    }
    
    if (options.signTransactionTitle) {
        formData.append('SignTransactionTitle', options.signTransactionTitle);
    }
    
    formData.append('Reason', options.reason || 'Test signing');
    formData.append('Location', options.location || 'H√† N·ªôi');
    
    const token = options.token || 'YOUR_BEARER_TOKEN';
    
    console.log('üì° [signPdfAdvanced] G·ª≠i request ƒë·∫øn:', `${BASE_URL}${API_ENDPOINT}`);
    
    try {
        // B∆∞·ªõc 4: G·ªçi API
        const response = await fetch(`${BASE_URL}${API_ENDPOINT}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        // B∆∞·ªõc 5: Ki·ªÉm tra response
        if (!response.ok) {
            const json = await response.json();
            throw new Error(`HTTP ${response.status}: ${json.message}`);
        }
        
        // B∆∞·ªõc 6: Nh·∫≠n file PDF ƒë√£ k√Ω
        const blob = await response.blob();
        
        // B∆∞·ªõc 7: T·ª± ƒë·ªông t·∫£i file v·ªÅ m√°y
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'signed_document.pdf';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        console.log('‚úÖ [signPdfAdvanced] PDF signed successfully! Blob size:', blob.size);
        return blob;
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå [signPdfAdvanced] Error signing PDF:', errorMessage);
        throw error;
    }
}

// ==================== TEST CASES ====================

/**
 * TEST 1: K√Ω ·∫©n (Hidden Signature)
 * Kh√¥ng hi·ªÉn th·ªã ch·ªØ k√Ω tr√™n PDF, ch·ªâ c√≥ ch·ªØ k√Ω ƒëi·ªán t·ª≠ ·∫©n
 */
export async function testEmptyCoordinates(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 1: Hidden Signature');
    
    return await signPdfAdvanced(pdfFile, null, {
        token,
        reason: 'K√Ω ·∫©n - kh√¥ng hi·ªÉn th·ªã',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Hidden Signature'
    });
}

/**
 * TEST 2: TextOnly Signature
 * Ch·ªâ hi·ªÉn th·ªã text, kh√¥ng c√≥ ·∫£nh ch·ªØ k√Ω
 */
export async function testTextOnlySignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 2: TextOnly Signature');
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50,
            Top: 50,
            Width: 200,
            Height: 80,
            SignType: 'TextOnly',
            SignText: 'ƒê√£ k√Ω b·ªüi: Nguy·ªÖn VƒÉn A\nNg√†y: 17/10/2025'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω text only',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test TextOnly'
    });
}

/**
 * TEST 3: ImageOnly Signature
 * Ch·ªâ hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω, kh√¥ng c√≥ text
 */
export async function testImageOnlySignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 3: ImageOnly Signature');
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 300,
            Top: 50,
            Width: 150,
            Height: 100,
            SignType: 'ImageOnly'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω image only',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test ImageOnly'
    });
}

/**
 * TEST 4: ImageAndText Signature
 * Hi·ªÉn th·ªã ·∫£nh ch·ªØ k√Ω + text t√πy ch·ªânh
 */
export async function testImageAndTextSignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 4: ImageAndText Signature');
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50,
            Top: 200,
            Width: 250,
            Height: 120,
            SignType: 'ImageAndText',
            SignText: 'T√¥i x√°c nh·∫≠n ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω image + text',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test ImageAndText'
    });
}

/**
 * TEST 5: ImageNameDateComment Signature
 * Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß: ·∫¢nh + T√™n ng∆∞·ªùi k√Ω + Ng√†y k√Ω + L√Ω do
 */
export async function testImageNameDateCommentSignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 5: ImageNameDateComment Signature');
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 350,
            Top: 200,
            Width: 200,
            Height: 100,
            SignType: 'ImageNameDateComment'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ƒë·∫ßy ƒë·ªß',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Full Info'
    });
}

/**
 * TEST 6: Multiple Signatures (Mixed Types)
 * K√Ω nhi·ªÅu ch·ªØ k√Ω v·ªõi c√°c lo·∫°i kh√°c nhau tr√™n c√πng 1 trang
 */
export async function testMultipleSignatures(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 6: Multiple Signatures (4 lo·∫°i kh√°c nhau)');
    
    const coordinates: SignatureCoordinate[] = [
        // TextOnly ·ªü g√≥c tr√™n tr√°i
        {
            PageNumber: 1,
            Left: 50, Top: 50,
            Width: 180, Height: 60,
            SignType: 'TextOnly',
            SignText: 'Ng∆∞·ªùi duy·ªát: Nguy·ªÖn VƒÉn A'
        },
        // ImageOnly ·ªü g√≥c tr√™n ph·∫£i
        {
            PageNumber: 1,
            Left: 400, Top: 50,
            Width: 120, Height: 80,
            SignType: 'ImageOnly'
        },
        // ImageAndText ·ªü gi·ªØa
        {
            PageNumber: 1,
            Left: 200, Top: 300,
            Width: 220, Height: 100,
            SignType: 'ImageAndText',
            SignText: 'ƒê√£ ki·ªÉm tra v√† ph√™ duy·ªát'
        },
        // ImageNameDateComment ·ªü g√≥c d∆∞·ªõi ph·∫£i
        {
            PageNumber: 1,
            Left: 400, Top: 600,
            Width: 180, Height: 90,
            SignType: 'ImageNameDateComment'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra nhi·ªÅu ch·ªØ k√Ω',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Multiple Signatures'
    });
}

/**
 * TEST 7: Multiple Pages
 * K√Ω nhi·ªÅu ch·ªØ k√Ω tr√™n nhi·ªÅu trang kh√°c nhau
 */
export async function testMultiplePages(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ Test 7: Multiple Pages');
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 2,
            Left: 50, Top: 100,
            Width: 200, Height: 80,
            SignType: 'ImageOnly'
        },
        {
            PageNumber: 2,
            Left: 10, Top: 100,
            Width: 200, Height: 80,
            SignType: 'ImageNameDateComment'
        },
        {
            PageNumber: 2,
            Left: 300, Top: 50,
            Width: 150, Height: 70,
            SignType: 'TextOnly',
            SignText: 'XXX10XXXX',
            SignFontSize: 20
        },
        {
            PageNumber: 2,
            Left: 100, Top: 50,
            Width: 150, Height: 70,
            SignType: 'TextOnly',
            SignText: 'XXX10XXXX'
        }
    ];
    
    return await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'K√Ω nhi·ªÅu trang',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Multiple Pages'
    });
}

// ==================== RUN ALL TESTS ====================

/**
 * Helper: L·∫•y file PDF t·ª´ input element
 */
export function getPdfFileFromInput(fileInputId: string = 'pdfFile'): File {
    const fileInput = document.getElementById(fileInputId) as HTMLInputElement | null;
    
    if (!fileInput) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y input element v·ªõi id="${fileInputId}"`);
    }
    
    if (!fileInput.files || !fileInput.files[0]) {
        throw new Error('Vui l√≤ng ch·ªçn file PDF tr∆∞·ªõc!');
    }
    
    return fileInput.files[0];
}

/**
 * Ch·∫°y t·∫•t c·∫£ 7 test cases
 * 
 * Y√™u c·∫ßu:
 * - C√≥ input element v·ªõi id='pdfFile' trong DOM
 * - File PDF ƒë√£ ƒë∆∞·ª£c ch·ªçn
 * 
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @param fileInputId - ID c·ªßa input element (default: 'pdfFile')
 * 
 * @example
 * // Trong browser console:
 * await runAllTests('YOUR_TOKEN');
 */
export async function runAllTests(token: string, fileInputId: string = 'pdfFile'): Promise<void> {
    console.log('\n========================================');
    console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y T·∫§T C·∫¢ 7 test cases');
    console.log('========================================\n');
    
    try {
        const pdfFile = getPdfFileFromInput(fileInputId);
        
        console.log('üìÑ File:', pdfFile.name);
        console.log('üìä Size:', (pdfFile.size / 1024).toFixed(2), 'KB');
        console.log('üîë Token:', token.substring(0, 20) + '...\n');
        
        const startTime = Date.now();
        
        // Ch·∫°y t·ª´ng test
        // console.log('‚è±Ô∏è Test 1/7: Hidden Signature...');
        // await testEmptyCoordinates(pdfFile, token);
        
        // console.log('‚è±Ô∏è Test 2/7: TextOnly...');
        // await testTextOnlySignature(pdfFile, token);
        
        // console.log('‚è±Ô∏è Test 3/7: ImageOnly...');
        // await testImageOnlySignature(pdfFile, token);
        
        // console.log('‚è±Ô∏è Test 4/7: ImageAndText...');
        // await testImageAndTextSignature(pdfFile, token);
        
        console.log('‚è±Ô∏è Test 5/7: ImageNameDateComment...');
        await testImageNameDateCommentSignature(pdfFile, token);
        
        // console.log('‚è±Ô∏è Test 6/7: Multiple Signatures...');
        // await testMultipleSignatures(pdfFile, token);
        
        // console.log('‚è±Ô∏è Test 7/7: Multiple Pages...');
        // await testMultiplePages(pdfFile, token);
        
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        
        console.log('\n========================================');
        console.log('‚úÖ T·∫§T C·∫¢ 7 TESTS HO√ÄN TH√ÄNH!');
        console.log(`‚è±Ô∏è Th·ªùi gian: ${duration}s`);
        console.log('========================================\n');
        
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('\n========================================');
        console.error('‚ùå TEST FAILED:', errorMessage);
        console.error('========================================\n');
        throw error;
    }
}

// ==================== MODULE INFO ====================

console.log('\n========================================');
console.log('‚úÖ TEST FUNCTIONS LOADED!');
console.log('========================================');
console.log('\nüì¶ Exported Functions:');
console.log('  1. signPdfAdvanced(pdfFile, coordinates, options)');
console.log('  2. testEmptyCoordinates(pdfFile, token)');
console.log('  3. testTextOnlySignature(pdfFile, token)');
console.log('  4. testImageOnlySignature(pdfFile, token)');
console.log('  5. testImageAndTextSignature(pdfFile, token)');
console.log('  6. testImageNameDateCommentSignature(pdfFile, token)');
console.log('  7. testMultipleSignatures(pdfFile, token)');
console.log('  8. testMultiplePages(pdfFile, token)');
console.log('  9. runAllTests(token, fileInputId?)');
console.log('\nüöÄ Quick Start:');
console.log('  const token = "YOUR_TOKEN";');
console.log('  await runAllTests(token);  // Ch·∫°y t·∫•t c·∫£ 7 tests');
console.log('\n  // Ho·∫∑c ch·∫°y t·ª´ng test ri√™ng l·∫ª:');
console.log('  const file = getPdfFileFromInput("pdfFile");');
console.log('  await testTextOnlySignature(file, token);');
console.log('========================================\n');
