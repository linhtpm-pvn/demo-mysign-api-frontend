/**
 * TypeScript functions to test sign-pdf-advanced endpoint
 * Base URL: http://localhost:5000 (adjust as needed)
 * Requires: Bearer token for authorization
 */

// ==================== TYPE DEFINITIONS ====================

/** C√°c lo·∫°i ch·ªØ k√Ω c√≥ th·ªÉ s·ª≠ d·ª•ng */
export type SignType = 'TextOnly' | 'ImageOnly' | 'ImageAndText' | 'ImageNameDateComment';

/** T·ªça ƒë·ªô v√† th√¥ng tin cho m·ªôt ch·ªØ k√Ω */
export interface SignatureCoordinate {
    /** S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1) */
    PageNumber: number;
    /** T·ªça ƒë·ªô X t·ª´ tr√°i (pixels) */
    Left: number;
    /** T·ªça ƒë·ªô Y t·ª´ tr√™n (pixels) */
    Top: number;
    /** Chi·ªÅu r·ªông c·ªßa ch·ªØ k√Ω (pixels) */
    Width: number;
    /** Chi·ªÅu cao c·ªßa ch·ªØ k√Ω (pixels) */
    Height: number;
    /** Lo·∫°i ch·ªØ k√Ω */
    SignType: SignType;
    /** Text hi·ªÉn th·ªã (optional, d√πng cho TextOnly v√† ImageAndText) */
    SignText?: string;
}

/** T√πy ch·ªçn cho vi·ªác k√Ω PDF */
export interface SignPdfOptions {
    /** Bearer token ƒë·ªÉ x√°c th·ª±c */
    token?: string;
    /** ID c·ªßa ch·ª©ng th∆∞ s·ªë */
    certificateId?: string;
    /** Ti√™u ƒë·ªÅ giao d·ªãch k√Ω */
    signTransactionTitle?: string;
    /** L√Ω do k√Ω */
    reason?: string;
    /** ƒê·ªãa ƒëi·ªÉm k√Ω */
    location?: string;
}

// ==================== CONSTANTS ====================

const BASE_URL = 'http://localhost:5000'; // Adjust this to your API URL
const API_ENDPOINT = '/api/my-sign/sign-pdf-advanced';

// ==================== FUNCTIONS ====================

/**
 * Helper function to create FormData and make request to sign PDF
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param signatureCoordinates - M·∫£ng t·ªça ƒë·ªô ch·ªØ k√Ω ho·∫∑c null n·∫øu k√Ω ·∫©n
 * @param options - C√°c t√πy ch·ªçn b·ªï sung
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function signPdfAdvanced(
    pdfFile: File,
    signatureCoordinates: SignatureCoordinate[] | null,
    options: SignPdfOptions = {}
): Promise<Blob> {
    console.log('üîß [signPdfAdvanced] B·∫Øt ƒë·∫ßu k√Ω PDF:', {
        fileName: pdfFile.name,
        fileSize: pdfFile.size,
        hasCoordinates: !!signatureCoordinates,
        coordinatesCount: signatureCoordinates?.length || 0,
        options
    });
    
    const formData = new FormData();
    formData.append('FileUpload', pdfFile);
    
    if (signatureCoordinates) {
        formData.append('SignatureCoordinates', JSON.stringify(signatureCoordinates));
    }
    
    if (options.certificateId) {
        formData.append('CertificateId', options.certificateId);
    }
    
    if (options.signTransactionTitle) {
        formData.append('SignTransactionTitle', options.signTransactionTitle);
    }
    
    formData.append('Reason', options.reason || 'Test signing');
    formData.append('Location', options.location || 'H√† N·ªôi');
    
    const token = options.token || 'YOUR_BEARER_TOKEN'; // Replace with actual token
    
    console.log('üì° [signPdfAdvanced] G·ª≠i request ƒë·∫øn:', `${BASE_URL}${API_ENDPOINT}`);
    
    try {
        const response = await fetch(`${BASE_URL}${API_ENDPOINT}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: formData
        });
        
        if (!response.ok) {
            const json = await response.json();
            throw new Error(`HTTP ${response.status}: ${json.message}`);
        }
        
        // Get the signed PDF as blob
        const blob = await response.blob();
        
        // Download the file
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'signed_document.pdf';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        console.log('‚úÖ [signPdfAdvanced] PDF signed successfully! Blob size:', blob.size);
        return blob;
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå [signPdfAdvanced] Error signing PDF:', errorMessage);
        throw error;
    }
}

/**
 * Test Case 1: Empty coordinates (hidden signature)
 * K√Ω ·∫©n - kh√¥ng hi·ªÉn th·ªã ch·ªØ k√Ω tr√™n PDF
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testEmptyCoordinates(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testEmptyCoordinates] Test 1: Empty Coordinates (Hidden Signature)');
    console.log('üìã [testEmptyCoordinates] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const result = await signPdfAdvanced(pdfFile, null, {
        token,
        reason: 'K√Ω ·∫©n - kh√¥ng hi·ªÉn th·ªã',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Hidden Signature'
    });
    console.log('‚úÖ [testEmptyCoordinates] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 2: Text Only signature
 * Ch·ªâ c√≥ text, kh√¥ng c√≥ h√¨nh ·∫£nh
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testTextOnlySignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testTextOnlySignature] Test 2: TextOnly Signature');
    console.log('üìã [testTextOnlySignature] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50,
            Top: 50,
            Width: 200,
            Height: 80,
            SignType: 'TextOnly' as const,
            SignText: 'ƒê√£ k√Ω b·ªüi: Nguy·ªÖn VƒÉn A\nNg√†y: 17/10/2025'
        }
    ];
    console.log('üìç [testTextOnlySignature] T·ªça ƒë·ªô:', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω text only',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test TextOnly'
    });
    console.log('‚úÖ [testTextOnlySignature] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 3: Image Only signature
 * Ch·ªâ c√≥ h√¨nh ·∫£nh ch·ªØ k√Ω, kh√¥ng c√≥ text
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testImageOnlySignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testImageOnlySignature] Test 3: ImageOnly Signature');
    console.log('üìã [testImageOnlySignature] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 300,
            Top: 50,
            Width: 150,
            Height: 100,
            SignType: 'ImageOnly' as const
        }
    ];
    console.log('üìç [testImageOnlySignature] T·ªça ƒë·ªô:', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω image only',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test ImageOnly'
    });
    console.log('‚úÖ [testImageOnlySignature] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 4: Image and Text signature
 * C√≥ c·∫£ h√¨nh ·∫£nh v√† text
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testImageAndTextSignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testImageAndTextSignature] Test 4: ImageAndText Signature');
    console.log('üìã [testImageAndTextSignature] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50,
            Top: 200,
            Width: 250,
            Height: 120,
            SignType: 'ImageAndText' as const,
            SignText: 'T√¥i x√°c nh·∫≠n ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω'
        }
    ];
    console.log('üìç [testImageAndTextSignature] T·ªça ƒë·ªô:', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ch·ªØ k√Ω image + text',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test ImageAndText'
    });
    console.log('‚úÖ [testImageAndTextSignature] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 5: Image + Name + Date + Comment signature
 * Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin: ·∫¢nh + T√™n + Ng√†y + Comment
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testImageNameDateCommentSignature(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testImageNameDateCommentSignature] Test 5: ImageNameDateComment Signature');
    console.log('üìã [testImageNameDateCommentSignature] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 350,
            Top: 200,
            Width: 200,
            Height: 100,
            SignType: 'ImageNameDateComment' as const
        }
    ];
    console.log('üìç [testImageNameDateCommentSignature] T·ªça ƒë·ªô:', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra ƒë·∫ßy ƒë·ªß',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Full Info'
    });
    console.log('‚úÖ [testImageNameDateCommentSignature] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 6: Multiple signatures with different types
 * Nhi·ªÅu ch·ªØ k√Ω v·ªõi nhi·ªÅu lo·∫°i kh√°c nhau tr√™n c√πng t√†i li·ªáu
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testMultipleSignatures(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testMultipleSignatures] Test 6: Multiple Signatures (Mixed Types)');
    console.log('üìã [testMultipleSignatures] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        // TextOnly ·ªü g√≥c tr√™n tr√°i
        {
            PageNumber: 1,
            Left: 50,
            Top: 50,
            Width: 180,
            Height: 60,
            SignType: 'TextOnly' as const,
            SignText: 'Ng∆∞·ªùi duy·ªát: Nguy·ªÖn VƒÉn A'
        },
        // ImageOnly ·ªü g√≥c tr√™n ph·∫£i
        {
            PageNumber: 1,
            Left: 400,
            Top: 50,
            Width: 120,
            Height: 80,
            SignType: 'ImageOnly' as const
        },
        // ImageAndText ·ªü gi·ªØa
        {
            PageNumber: 1,
            Left: 200,
            Top: 300,
            Width: 220,
            Height: 100,
            SignType: 'ImageAndText' as const,
            SignText: 'ƒê√£ ki·ªÉm tra v√† ph√™ duy·ªát'
        },
        // ImageNameDateComment ·ªü g√≥c d∆∞·ªõi ph·∫£i
        {
            PageNumber: 1,
            Left: 400,
            Top: 600,
            Width: 180,
            Height: 90,
            SignType: 'ImageNameDateComment' as const
        }
    ];
    console.log('üìç [testMultipleSignatures] T·ªça ƒë·ªô (4 ch·ªØ k√Ω):', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'Ki·ªÉm tra nhi·ªÅu ch·ªØ k√Ω',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Multiple Signatures'
    });
    console.log('‚úÖ [testMultipleSignatures] Ho√†n th√†nh!');
    return result;
}

/**
 * Test Case 7: Multiple signatures on different pages
 * Nhi·ªÅu ch·ªØ k√Ω tr√™n c√°c trang kh√°c nhau
 * @param pdfFile - File PDF c·∫ßn k√Ω
 * @param token - Bearer token ƒë·ªÉ x√°c th·ª±c
 * @returns Blob c·ªßa file PDF ƒë√£ k√Ω
 */
export async function testMultiplePages(pdfFile: File, token: string): Promise<Blob> {
    console.log('üß™ [testMultiplePages] Test 7: Multiple Pages');
    console.log('üìã [testMultiplePages] Tham s·ªë:', { fileName: pdfFile.name, hasToken: !!token });
    
    const coordinates: SignatureCoordinate[] = [
        {
            PageNumber: 1,
            Left: 50,
            Top: 100,
            Width: 200,
            Height: 80,
            SignType: 'ImageOnly' as const,
            SignText: 'Trang 1 - ƒê√£ k√Ω'
        },
        {
            PageNumber: 3,
            Left: 50,
            Top: 100,
            Width: 200,
            Height: 80,
            SignType: 'ImageOnly' as const,
            SignText: 'Trang 1 - ƒê√£ k√Ω'
        },
        {
            PageNumber: 2,
            Left: 50,
            Top: 100,
            Width: 200,
            Height: 80,
            SignType: 'ImageNameDateComment' as const
        },
        {
            PageNumber: 3,
            Left: 100,
            Top: 50,
            Width: 150,
            Height: 70,
            SignType: 'TextOnly' as const,
            SignText: 'XXX10XXXX'
        },
        {
            PageNumber: 1,
            Left: 100,
            Top: 50,
            Width: 150,
            Height: 70,
            SignType: 'TextOnly' as const,
            SignText: 'XXX10XXXX'
        }
    ];
    console.log('üìç [testMultiplePages] T·ªça ƒë·ªô (3 trang):', coordinates);
    
    const result = await signPdfAdvanced(pdfFile, coordinates, {
        token,
        reason: 'K√Ω nhi·ªÅu trang',
        location: 'H√† N·ªôi',
        signTransactionTitle: 'Test Multiple Pages'
    });
    console.log('‚úÖ [testMultiplePages] Ho√†n th√†nh!');
    return result;
}

/**
 * Ch·∫°y t·∫•t c·∫£ c√°c test case l·∫ßn l∆∞·ª£t
 * Y√™u c·∫ßu c√≥ input element v·ªõi id='pdfFile' v√† 'authToken' trong DOM
 * @returns Promise<void>
 * @example
 * // Trong browser console:
 * await runAllTests();
 */
export async function runAllTests(token: string): Promise<void> {
    console.log('\n========================================');
    console.log('üöÄ [runAllTests] B·∫Øt ƒë·∫ßu ch·∫°y t·∫•t c·∫£ test cases');
    console.log('========================================\n');
    // Get file input element
    const fileInput = document.getElementById('pdfFile') as HTMLInputElement | null;
    if (!fileInput || !fileInput.files || !fileInput.files[0]) {
        console.error('‚ùå [runAllTests] Vui l√≤ng ch·ªçn file PDF tr∆∞·ªõc!');
        return;
    }
    
    const pdfFile: File = fileInput.files[0];
    
    console.log('üìÑ [runAllTests] File ƒë∆∞·ª£c ch·ªçn:', pdfFile.name);
    console.log('üìä [runAllTests] K√≠ch th∆∞·ªõc:', (pdfFile.size / 1024).toFixed(2), 'KB');
    console.log('üîë [runAllTests] Token:', token.substring(0, 20) + '...');
    console.log('');
    
    const startTime = Date.now();
    let passedTests = 0;
    let failedTests = 0;
    
    try {
        // Run each test
        console.log('‚è±Ô∏è [runAllTests] Test 1/7...');
        await testEmptyCoordinates(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        console.log('‚è±Ô∏è [runAllTests] Test 2/7...');
        await testTextOnlySignature(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        console.log('‚è±Ô∏è [runAllTests] Test 3/7...');
        await testImageOnlySignature(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        console.log('‚è±Ô∏è [runAllTests] Test 4/7...');
        await testImageAndTextSignature(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        console.log('‚è±Ô∏è [runAllTests] Test 5/7...');
        await testImageNameDateCommentSignature(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        console.log('‚è±Ô∏è [runAllTests] Test 6/7...');
        await testMultipleSignatures(pdfFile, token);
        passedTests++;
        console.log('---\n');
        
        // await testMultiplePages(pdfFile, token); // Uncomment if PDF has multiple pages
        
        const endTime = Date.now();
        const duration = ((endTime - startTime) / 1000).toFixed(2);
        
        console.log('\n========================================');
        console.log('‚úÖ [runAllTests] T·∫•t c·∫£ test cases ho√†n th√†nh!');
        console.log(`‚è±Ô∏è [runAllTests] Th·ªùi gian: ${duration}s`);
        console.log(`üìä [runAllTests] K·∫øt qu·∫£: ${passedTests} passed, ${failedTests} failed`);
        console.log('========================================\n');
    } catch (error) {
        failedTests++;
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('\n========================================');
        console.error('‚ùå [runAllTests] Test failed:', errorMessage);
        console.error('üìä [runAllTests] K·∫øt qu·∫£: ', passedTests, 'passed,', failedTests, 'failed');
        console.error('========================================\n');
        throw error;
    }
}

// ==================== MODULE INITIALIZATION ====================

console.log('\n========================================');
console.log('‚úÖ Test functions loaded & exported!');
console.log('========================================');
console.log('\nüì¶ Exported Functions:');
console.log('  - signPdfAdvanced(pdfFile, coordinates, options)');
console.log('  - testEmptyCoordinates(pdfFile, token)');
console.log('  - testTextOnlySignature(pdfFile, token)');
console.log('  - testImageOnlySignature(pdfFile, token)');
console.log('  - testImageAndTextSignature(pdfFile, token)');
console.log('  - testImageNameDateCommentSignature(pdfFile, token)');
console.log('  - testMultipleSignatures(pdfFile, token)');
console.log('  - testMultiplePages(pdfFile, token)');
console.log('  - runAllTests()');
console.log('\nüöÄ Quick start:');
console.log('  await runAllTests()');
console.log('========================================\n');
